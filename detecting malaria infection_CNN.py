# -*- coding: utf-8 -*-
"""Final Code of CNN model
@author: Youssef

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hbhUAtl0nRf55yOW5hNOkg8ZXXkA5fHa
"""



#@title extracting Dataset { output-height: 50 }


# -*- coding: utf-8 -*-
"""
Spyder Editor

This is a temporary script file.
"""

from PIL import Image 
import numpy as np
import tensorflow as tf
import os 
from sklearn.model_selection import train_test_split

a = 64
def load_data(data_directory):
    directories = [d for d in os.listdir(data_directory) 
                   if os.path.isdir(os.path.join(data_directory, d))]
    print("exploreing in ",directories)
    labels = []
    images = []
    
    for d in directories:
        
        label_directory = os.path.join(data_directory, d)
        
        file_names = [os.path.join(label_directory, f) 
                      for f in os.listdir(label_directory) 
                      if f.endswith(".png")]
        
        for f in file_names:
            i = Image.open(f).convert('RGB')
            i = i.resize((a,a))
            i = np.array(i)
            images.append(i.reshape(a,a,3))
            labels.append(d)
    return images, labels



X, y = load_data(os.path.join("cell_images"))


X = np.array(X).astype(float)
y = np.array(y)

from sklearn.preprocessing import LabelEncoder 
labellencoder_y = LabelEncoder()
y =labellencoder_y.fit_transform(y)

X_train, X_test, y_train, y_test = train_test_split(X , y , test_size=0.2, random_state=21 , stratify=y)
del X
del y

def cnn_model_fn(features, labels, mode):
  #Model function for CNN.
  # Input Laye
      
  input_layer = tf.reshape(features , [-1, a, a, 3] )

  # Convolutional Layer #1
  conv1 = tf.layers.conv2d(
      inputs=input_layer,
      filters=64,
      kernel_size=[3, 3],
      padding="same",
      activation=tf.nn.relu)
  print("i am here  Convolutional Layer #1")
  # Pooling Layer #1
  pool1 = tf.layers.max_pooling2d(inputs=conv1, pool_size=[2, 2], strides=2)



  # Dense Layer
  pool2_flat = tf.reshape(pool1, [-1, 32 * 32 * 64])
  dense1 = tf.layers.dense(inputs=pool2_flat, units=128, activation=tf.nn.relu)
  dropout1 = tf.layers.dropout(
      inputs=dense1, rate=0.2, training=mode == tf.estimator.ModeKeys.TRAIN)
  
  dense2 = tf.layers.dense(inputs=dropout1, units=64, activation=tf.nn.relu)
  dropout2 = tf.layers.dropout(
      inputs=dense2, rate=0.2, training=mode == tf.estimator.ModeKeys.TRAIN)
  print("i am here dense Layer #1")

  # Logits Layer
  logits = tf.layers.dense(inputs=dropout2, units=2)

  predictions = {
      # Generate predictions (for PREDICT and EVAL mode)
      "classes": tf.argmax(input=logits, axis=1),
      # Add `softmax_tensor` to the graph. It is used for PREDICT and by the
      # `logging_hook`.
      "probabilities": tf.nn.softmax(logits, name="softmax_tensor")
  }
  

  if mode == tf.estimator.ModeKeys.PREDICT:
    print("i am here predictions Layer #1")
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)
    

  # Calculate Loss (for both TRAIN and EVAL modes)
  loss = tf.losses.sparse_softmax_cross_entropy(labels=labels, logits=logits)

  # Configure the Training Op (for TRAIN mode)
  if mode == tf.estimator.ModeKeys.TRAIN:
    optimizer = tf.train.GradientDescentOptimizer(learning_rate=0.001)
    train_op = optimizer.minimize(
        loss=loss,
        global_step=tf.train.get_global_step())
    print("i am train Layer #1")
    return tf.estimator.EstimatorSpec(mode=mode, loss=loss, train_op=train_op)
  


  # Add evaluation metrics (for EVAL mode)
  eval_metric_ops = {
      "accuracy": tf.metrics.accuracy(
          labels=labels, predictions=predictions["classes"])
  }
  print("i am train Layer #1")
  return tf.estimator.EstimatorSpec(
      mode=mode, loss=loss, eval_metric_ops=eval_metric_ops)
# Create the Estimator
mnist_classifier = tf.estimator.Estimator(
      model_fn=cnn_model_fn)

  # Set up logging for predictions
  # Log the values in the "Softmax" tensor with label "probabilities"
tensors_to_log = {"probabilities": "softmax_tensor"}
logging_hook = tf.train.LoggingTensorHook(
      tensors=tensors_to_log, every_n_iter=50)

  # Train the model
train_input_fn = tf.compat.v1.estimator.inputs.numpy_input_fn(
      x=X_train,
      y=y_train,
      batch_size=100,
      num_epochs=None,
      shuffle=True)
mnist_classifier.train(
      input_fn=train_input_fn,
      steps=10000,
      hooks=[logging_hook])

#@title evaluate test set { output-height: 150, form-width: "40%", display-mode: "both" }
eval_input_fn = tf.estimator.inputs.numpy_input_fn(
    x=X_test,
    y=y_test,
    num_epochs=1,
    shuffle=True)

eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn)
print(eval_results)

#@title evaluate training set


eval_input_fn = tf.estimator.inputs.numpy_input_fn(
    x=X_train,
    y=y_train,
    num_epochs=1,
    shuffle=True)

eval_results = mnist_classifier.evaluate(input_fn=eval_input_fn)
print(eval_results)